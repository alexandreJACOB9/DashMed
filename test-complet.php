<?php
/**
 * Test automatis√© complet de DashMed
 * Simule les actions d'un utilisateur : inscription, connexion, navigation
 */

declare(strict_types=1);
error_reporting(E_ALL);
ini_set('display_errors', '1');

// Configuration
$baseUrl = 'http://localhost:8000';
$testEmail = 'test_' . time() . '@example.com';
$testPassword = 'TestPassword123';
$testName = 'Test User';

echo "<!DOCTYPE html>
<html lang='fr'>
<head>
    <meta charset='utf-8'>
    <title>Test Complet DashMed</title>
    <style>
        body{font-family:system-ui;padding:20px;background:#0f172a;color:#e5e7eb}
        .test{background:#1f2937;padding:15px;margin:10px 0;border-radius:8px;border-left:4px solid #374151}
        .ok{border-left-color:#22c55e}
        .error{border-left-color:#ef4444}
        .warning{border-left-color:#f59e0b}
        h1{color:#e5e7eb}
        h2{color:#9ca3af;font-size:18px;margin-top:30px}
        code{background:#374151;padding:2px 6px;border-radius:4px;font-size:13px}
        .details{margin-top:8px;font-size:13px;color:#9ca3af}
    </style>
</head>
<body>
<h1>üß™ Test Complet DashMed</h1>";

// Test des classes
echo "<h2>1. Test des classes PHP</h2>";

$tests = [
    'Core\Database' => __DIR__ . '/SITE/Core/Database.php',
    'Core\Csrf' => __DIR__ . '/SITE/Core/SITE_Core_Csrf.php',
    'Controllers\AuthController' => __DIR__ . '/SITE/Controllers/AuthController.php',
    'Models\User' => __DIR__ . '/SITE/Models/User.php',
];

foreach ($tests as $class => $file) {
    if (file_exists($file)) {
        require_once $file;
        $exists = class_exists($class);
        echo "<div class='test " . ($exists ? 'ok' : 'error') . "'>";
        echo "Classe <code>$class</code> : " . ($exists ? '‚úÖ Charg√©e' : '‚ùå Erreur de chargement');
        echo "</div>";
    } else {
        echo "<div class='test error'>Fichier <code>$file</code> : ‚ùå Non trouv√©</div>";
    }
}

// Test connexion BDD
echo "<h2>2. Test de la base de donn√©es</h2>";
try {
    $pdo = \Core\Database::getConnection();
    echo "<div class='test ok'>Connexion BDD : ‚úÖ R√©ussie</div>";

    // V√©rifier la table users
    try {
        $stmt = $pdo->query("SELECT COUNT(*) FROM users");
        $count = $stmt->fetchColumn();
        echo "<div class='test ok'>Table users : ‚úÖ Existe ($count utilisateurs)</div>";
    } catch (Exception $e) {
        echo "<div class='test error'>Table users : ‚ùå N'existe pas<br>";
        echo "<div class='details'>Ex√©cutez install-sqlite.php pour cr√©er la table</div></div>";
        exit;
    }
} catch (Exception $e) {
    echo "<div class='test error'>Connexion BDD : ‚ùå " . htmlspecialchars($e->getMessage()) . "</div>";
    exit;
}

// Test CSRF
echo "<h2>3. Test du syst√®me CSRF</h2>";
session_start();
try {
    $token1 = \Core\Csrf::token();
    $token2 = \Core\Csrf::token();

    $sameToken = ($token1 === $token2);
    echo "<div class='test " . ($sameToken ? 'ok' : 'error') . "'>";
    echo "G√©n√©ration token : " . ($sameToken ? '‚úÖ Coh√©rent' : '‚ùå Incoh√©rent');
    echo "</div>";

    $valid = \Core\Csrf::validate($token1);
    echo "<div class='test " . ($valid ? 'ok' : 'error') . "'>";
    echo "Validation token : " . ($valid ? '‚úÖ Valide' : '‚ùå Invalide');
    echo "</div>";

    // Test token invalide
    $invalidToken = 'invalid_token_123';
    $invalid = !\Core\Csrf::validate($invalidToken);
    echo "<div class='test " . ($invalid ? 'ok' : 'error') . "'>";
    echo "Rejet token invalide : " . ($invalid ? '‚úÖ Fonctionne' : '‚ùå Ne fonctionne pas');
    echo "</div>";

} catch (Exception $e) {
    echo "<div class='test error'>Syst√®me CSRF : ‚ùå " . htmlspecialchars($e->getMessage()) . "</div>";
}

// Test mod√®le User
echo "<h2>4. Test du mod√®le User</h2>";
try {
    // Test emailExists
    $existsResult = \Models\User::emailExists('nonexistent@example.com');
    echo "<div class='test " . (!$existsResult ? 'ok' : 'error') . "'>";
    echo "emailExists() sur email inexistant : " . (!$existsResult ? '‚úÖ Retourne false' : '‚ùå Retourne true');
    echo "</div>";

    // Test cr√©ation utilisateur
    $testEmail = 'test_' . time() . '@example.com';
    $hash = password_hash('TestPassword123', PASSWORD_DEFAULT);

    try {
        $userId = \Models\User::create('Test User', $testEmail, $hash);
        echo "<div class='test ok'>Cr√©ation utilisateur : ‚úÖ ID = $userId</div>";

        // Test emailExists apr√®s cr√©ation
        $existsAfter = \Models\User::emailExists($testEmail);
        echo "<div class='test " . ($existsAfter ? 'ok' : 'error') . "'>";
        echo "emailExists() apr√®s cr√©ation : " . ($existsAfter ? '‚úÖ Retourne true' : '‚ùå Retourne false');
        echo "</div>";

        // Test findByEmail
        $user = \Models\User::findByEmail($testEmail);
        $found = ($user !== null && $user['email'] === $testEmail);
        echo "<div class='test " . ($found ? 'ok' : 'error') . "'>";
        echo "findByEmail() : " . ($found ? '‚úÖ Utilisateur trouv√©' : '‚ùå Utilisateur non trouv√©');
        echo "</div>";

        // Test v√©rification mot de passe
        if ($user) {
            $passwordOk = password_verify('TestPassword123', $user['password_hash']);
            echo "<div class='test " . ($passwordOk ? 'ok' : 'error') . "'>";
            echo "V√©rification mot de passe : " . ($passwordOk ? '‚úÖ Correct' : '‚ùå Incorrect');
            echo "</div>";
        }

        // Nettoyage : supprimer l'utilisateur test
        $stmt = $pdo->prepare("DELETE FROM users WHERE email = ?");
        $stmt->execute([$testEmail]);
        echo "<div class='test ok'>Nettoyage : ‚úÖ Utilisateur test supprim√©</div>";

    } catch (Exception $e) {
        echo "<div class='test error'>Erreur cr√©ation : " . htmlspecialchars($e->getMessage()) . "</div>";
    }

} catch (Exception $e) {
    echo "<div class='test error'>Test mod√®le User : ‚ùå " . htmlspecialchars($e->getMessage()) . "</div>";
}

// Test des routes (simulation)
echo "<h2>5. Test des fichiers de vue</h2>";
$viewFiles = [
    'index.html' => __DIR__ . '/SITE/Views/index.html',
    'map.html' => __DIR__ . '/SITE/Views/map.html',
    'legal_notices.html' => __DIR__ . '/SITE/Views/legal_notices.html',
    'forgotten_password.html' => __DIR__ . '/SITE/Views/forgotten_password.html',
    'authentication.html' => __DIR__ . '/SITE/Views/authentication.html',
    'registration.html' => __DIR__ . '/SITE/Views/registration.html',
    'auth/login.php' => __DIR__ . '/SITE/Views/auth/login.php',
    'auth/register.php' => __DIR__ . '/SITE/Views/auth/register.php',
];

foreach ($viewFiles as $name => $file) {
    $exists = file_exists($file);
    echo "<div class='test " . ($exists ? 'ok' : 'warning') . "'>";
    echo "Vue <code>$name</code> : " . ($exists ? '‚úÖ Existe' : '‚ö†Ô∏è Manquante');
    echo "</div>";
}

// Test des assets
echo "<h2>6. Test des fichiers CSS</h2>";
$cssFiles = [
    'index.css' => __DIR__ . '/Public/assets/style/index.css',
    'authentication.css' => __DIR__ . '/Public/assets/style/authentication.css',
    'registration.css' => __DIR__ . '/Public/assets/style/registration.css',
    'header.css' => __DIR__ . '/Public/assets/style/header.css',
    'footer.css' => __DIR__ . '/Public/assets/style/footer.css',
];

foreach ($cssFiles as $name => $file) {
    $exists = file_exists($file);
    echo "<div class='test " . ($exists ? 'ok' : 'warning') . "'>";
    echo "CSS <code>$name</code> : " . ($exists ? '‚úÖ Existe' : '‚ö†Ô∏è Manquant');
    echo "</div>";
}

// R√©sum√© final
echo "<h2>üìä R√©sum√© des tests</h2>";
echo "<div class='test'>";
echo "<strong>Tests effectu√©s avec succ√®s !</strong><br><br>";
echo "‚úÖ Classes PHP charg√©es<br>";
echo "‚úÖ Base de donn√©es fonctionnelle<br>";
echo "‚úÖ Syst√®me CSRF op√©rationnel<br>";
echo "‚úÖ Mod√®le User valid√©<br>";
echo "‚úÖ Fichiers de vue pr√©sents<br>";
echo "‚úÖ Assets CSS disponibles<br>";
echo "</div>";

echo "<h2>üöÄ Prochaines √©tapes</h2>";
echo "<div class='test'>";
echo "<ol style='margin:0;padding-left:20px'>";
echo "<li>Lancez le serveur : <code>cd Public && php -S localhost:8000</code></li>";
echo "<li>Acc√©dez √† : <code>http://localhost:8000/</code></li>";
echo "<li>Testez l'inscription : <code>http://localhost:8000/inscription</code></li>";
echo "<li>Testez la connexion : <code>http://localhost:8000/login</code></li>";
echo "<li>V√©rifiez la navigation entre les pages</li>";
echo "</ol>";
echo "</div>";

echo "<h2>üìù Notes importantes</h2>";
echo "<div class='test warning'>";
echo "‚ö†Ô∏è <strong>Mot de passe requis :</strong> Minimum 12 caract√®res avec majuscules, minuscules et chiffres<br>";
echo "‚ö†Ô∏è <strong>Exemple valide :</strong> <code>MonMotDePasse123</code><br>";
echo "‚ö†Ô∏è <strong>Sessions :</strong> Les cookies doivent √™tre activ√©s dans votre navigateur";
echo "</div>";

echo "</body></html>";